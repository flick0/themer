#!/usr/bin/python

import argparse
import asyncio
import subprocess
import time

import logger
from colorschemes import *
from util.config import apply
from util.tools import *

to_restart = {
    "xrdb": [],
}


async def act_args(args: argparse.Namespace) -> bool:
    if args.sync:
        logger.info(f"syncing colors")
        started = time.time()
        await catppuccin_scrape()
        logger.log(f"finished syncing in {round(time.time() - started,2)}s")
    if args.apply:
        logger.info(f"applying theme {args.apply}")
        started = time.time()
        colors = await get_theme(*args.apply.split("-"))
        DARK = False if args.apply.split("-")[1] == "latte" else True
        restart = []
        async for loc in apply(colors.pallete(), DARK):
            if loc[1]:
                logger.error(f"setting {loc[0]} failed: {loc[1]}")
            else:
                logger.log(f"setting {loc[0]} [green bold]successful")
            if loc[1]:
                raise loc[1]
            if loc[0] in to_restart:
                restart.extend(to_restart[loc[0]])
        logger.log(f"finished applying in {round(time.time() - started,2)} s")
        for app in restart:
            logger.warn(f"[bold]restarting {app}")
            if app == "awesome":
                subprocess.run(
                    ["awesome-client", "awesome.restart()"], stdout=None
                )


async def main() -> None:
    parser = argparse.ArgumentParser()
    commands = {
        "apply": {
            "alias": ("-a", "--apply"),
            "desc": "apply theme",
        },
        "sync": {
            "alias": ("-s", "--sync"),
            "desc": "sync colors for available themes",
            "action": "store_true",
        },
    }
    for option in commands.values():
        parser.add_argument(
            *option["alias"], help=option["desc"], action=option.get("action")
        )
    args = parser.parse_args()
    await act_args(args)


if __name__ == "__main__":
    asyncio.run(main())
