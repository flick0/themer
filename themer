#!/usr/bin/python

import argparse
import asyncio
import time

from colorschemes import *
from util.config import apply
from util.tools import *


async def act_args(args: argparse.Namespace) -> bool:
    if args.sync:
        print(f"syncing colors")
        started = time.time()
        await catppuccin_scrape()
        print(f"finished syncing in {round(time.time() - started,2)}s")
    if args.apply:
        print(f"applying theme {args.apply}")
        started = time.time()
        colors = await get_theme(*args.apply.split("-"))
        DARK = False if args.apply.split("-")[1] == "latte" else True
        async for loc in apply(colors.pallete(), DARK):
            print(
                f"setting {loc[0]} " + "successful"
                if not loc[1]
                else f"failed: {loc[1]}"
            )
            if loc[1]:
                raise loc[1]
        print(f"finished applying in {round(time.time() - started,2)}s")


async def main() -> None:
    parser = argparse.ArgumentParser()
    commands = {
        "apply": {
            "alias": ("-a", "--apply"),
            "desc": "apply theme",
        },
        "sync": {
            "alias": ("-s", "--sync"),
            "desc": "sync colors for available themes",
            "action": "store_true",
        },
    }
    for option in commands.values():
        parser.add_argument(
            *option["alias"], help=option["desc"], action=option.get("action")
        )
    args = parser.parse_args()
    await act_args(args)


if __name__ == "__main__":
    asyncio.run(main())
